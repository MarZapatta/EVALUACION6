plot(1)
clear()
1+1
plot(1+1)
plot(x*x)
x=1
y=5
plot(x,y)
plot(x,y)
ggplot(x,y)
ggplot()
library(forcats)
install.packages(forcats)
# Suscribete para más código en R https://bit.ly/2WNDhNR
1+1-1*(1+1-1)/1+1*(-1)
aguacate <- 15
# asigna los numeros a cada fruta
mango <- 10
manzana <- 5
aguacate <- 15
# resuelve el complejo acertijo
resultado <- 2*aguacate + 4*manzana + 1.5*mango
# imprime el resultado por pantalla
resultado
class(resultado)
class(nombre)
# crea una variable con algún nombre
nombre<- "Rafa"
class(nombre)
1 > 2
# cual es la clase de esto
class(1>2)
# suma nombre con resultado
nombre+resultado
# Antes de nada, limpiamos el workspace, por si hubiera alg?n dataset o informaci?n cargada
rm(list = ls())
# author: Alex RayÃ³n (alex.rayon@deusto.es)
# date: Marzo, 2020
# Antes de nada, limpiamos el workspace, por si hubiera alg?n dataset o informaci?n cargada
rm(list = ls())
# Cambiar el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Cargamos todas las librerÃ�as necesarias
library(httr) # La librerÃ�a que nos ofrece R para hacer llamadas a una API
library(jsonlite) # Voy a llamar a la API que ha abierto Johns Hopkins
library(dplyr) #  Manipular datos tambiÃ©n funciona muy bien
install.packages("ggplot2")
library(ggplot2) #  LibrerÃ�a que contiene todas las funciones y caracterÃ�sticas para elaborar grÃ¡ficas
install.packages("gganimate")
install.packages("gifski")
install.packages("png")
install.packages("av")
library(gganimate) #  LibrerÃ�a me permite construir grÃ¡ficas animadas
library(forcats)
# Leemos todos los datos necesarios
# Detalles de la API: https://covid19api.com/
#   (1.1) Obtenemos los datos para EspaÃ±a: Confirmados
url  <- "https://api.covid19api.com/total/country/peru/status/confirmed"
request <- GET(url = url)
request$status_code
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
confirmadosSP <- select(df,
pais = Country,
fecha = Date,
numero = Cases)
confirmadosSP$fecha<-as.Date(confirmadosSP$fecha)
View(df)
View(confirmadosSP)
View(confirmadosSP)
install.packages(c("car", "metRology", "multcomp", "nortest", "outliers", "plotrix", "randtests", "vioplot"))
install.packages(c("dplyr", "forcats", "gganimate", "ggplot2", "httr", "jsonlite", "rstudioapi"))
#Lectura de datos
datos <- read.table(file.choose(),header=T)
head(datos)
#Prueba de Cochran y Grubs
library(outliers)
cochran.test(Desviacion~Metrologo,data=datos)
cochran.test(Desviacion~Metrologo,data=datos,inlying=TRUE)
medias <- stack(tapply(datos$Desviacion,datos$Metrologo,mean))
names(medias) <- c("Desviacion","Metrologo")
medias
grubbs.test(medias[,1],type=10,opposite = FALSE)
grubbs.test(medias[,1],type=10,opposite = TRUE)
#Se retiran los datos atípicos
datos_1 <- droplevels(subset(datos, Metrologo != "LSG"))
source('E:/Escritorio/MAR/R/R METROLOGIA/Pruebas de Hipótesis.R')
2.999999+0.000001
source('E:/Escritorio/RClase1b/ejemplo01.R', echo=TRUE)
source('E:/Escritorio/RClase1b/ejemplo01.R', echo=TRUE)
source('E:/Escritorio/RClase1b/ejemplo01.R', echo=TRUE)
source('E:/Escritorio/RClase1b/ejemplo01.R', echo=TRUE)
source('E:/Escritorio/RClase1b/ejemplo01.R', echo=TRUE)
source('E:/Escritorio/RClase1b/ejemplo01.R', echo=TRUE)
source('E:/Escritorio/RClase1b/ejemplo01.R', echo=TRUE)
matrizvector <- A%*%a
### Vectores en R #####
a <- c(1, 3, 2)
# Transpuesta de a
transpuesta <- t(a)
# Multiplicacion de un vector por un escalar
multiplicaciondeunvectorporescalar <- 7*a
# Suma de 2 vectores, como ya tenemos a no es necesario volver a ingresar este vector
b <- c(2,8,9)
sumadevectores <- a+b
# Producto interno de vectores
productointernodevectores <- sum(a*b)
# Norma de un vector
# raiz del producto del mismo vector.
normadeunvector <- sqrt(sum(a*a))
# Vector O (vector repite el numero 0, segun las veces que le indiquemos)
# Vector que contiene solo ceros.
vector0 <- rep(0,5)
# Vector 1 (vector repite el numero 1, segun las veces que le indiquemos)
# Vector que contien solo unos.
vector1 <- rep(1,5)
# Vectores ortogonales (producto de vectores = 0)
v1 <- c(1,1)
v2 <- c(-1,1)
vectoresortogonales <- sum(v1*v2)
#### MATRICES ####
#Se leeran los numeros columna por columna
A <- matrix(c(1,3,2,2,8,9),ncol=3)
#Ejercicio de prueba, hacer la siguiente matriz:
#       4  0  5
# A1=  -3  8 -15
#      -15 0  6
A1 <- matrix(c(4,-3,-15,0,8,0,5,-15,6),ncol = 3)
#Si queremos leer los numeros de fila por fila debemos añadir el byrow=T
A2 <- matrix(c(1,3,2,2,8,9), ncol = 3, byrow = T)
# Multiplicacion de una matriz por un escalar
matrizporescalar <- 7*A
#Transpues de una matriz
transpuestadematrizA <-t(A)
#Suma de matrices
#Forma1, forma propia de crear la matriz B
#B <- matrix(c(5,8,3,4,2,7), ncol = 2)
#Forma2, forma segun el pdf de crear la matriz
B <- matrix(c(5,8,3,4,2,7), ncol = 3 , byrow = T)
sumadematricez <- A+B
# Multiplicacion de una matriz por vector
matrizvector <- A%*%a
matrizvector
A*a
A
a
A%*%a
A*a
multiplicacionef*ec <- A*a
multiplicacionefporec <- A*a
multiplicacionefporec
AM <- matrix(c(1, 3, 2, 2, 8, 9), ncol = 2)
BM <- matrix(c(5, 8, 4, 2), ncol = 2)
multiplicaciondematrices <- A %*% B
AM <- matrix(c(1, 3, 2, 2, 8, 9), ncol = 2)
BM <- matrix(c(5, 8, 4, 2), ncol = 2)
multiplicaciondematrices <- AM %*% BM
multiplicaciondematrices
matrizcero <- matrix(0, nrow = 2, ncol = 3)
matrizcero
matrizunidad <- matrix(1, nrow = 2, ncol = 3)
matrizdiagonal <- diag(c(1, 2, 3))
matrizdiagonal
md <- diag(1, 3)
md
diag(diag(c(1, 2, 3)))
diag(AM)
diag(c(1, 2, 3
matrizdiagonal
matrizdiagonal <- diag(c(1, 2, 3))
matrizdiagonal
diag(diag(c(1, 2, 3)))
inversadeunamtriz <- matrix(c(1, 3, 2, 4), ncol = 2, byrow = T)
inversadeunamtriz
BI <- solve(inversadeunamtriz)
BI
#INVERSA DE UNA MATRIZ
B2 <- matrix(c(1, 3, 2, 4), ncol = 2, byrow = T)
# INVERSA DE UNA MATRIZ SE UTILIZA SOLVE
BI <- solve(B2)
BI
A %*% B
AM %*% BI
AM %*% B2
AM %*% BI
B2 %*% BI
source('E:/Escritorio/R UNI/LECTURAS/DESARROLLO LECTURA 2.R')
source('E:/Escritorio/R UNI/LECTURAS/DESARROLLO LECTURA 2.R')
source('E:/Escritorio/R UNI/LECTURAS/DESARROLLO LECTURA 2.R')
source('E:/Escritorio/R UNI/LECTURAS/DESARROLLO LECTURA 2.R')
source('E:/Escritorio/R UNI/LECTURAS/DESARROLLO LECTURA 2.R')
source('E:/Escritorio/R UNI/LECTURAS/DESARROLLO LECTURA 2.R', echo=TRUE)
#### Vectores en R #####
a <- c(1, 3, 2)
# Transpuesta de a
transpuesta <- t(a)
# Multiplicacion de un vector por un escalar
multiplicaciondeunvectorporescalar <- 7*a
# Suma de 2 vectores, como ya tenemos a no es necesario volver a ingresar este vector
b <- c(2,8,9)
sumadevectores <- a+b
# Producto interno de vectores
productointernodevectores <- sum(a*b)
# Norma de un vector
# raiz del producto del mismo vector.
normadeunvector <- sqrt(sum(a*a))
# Vector O (vector repite el numero 0, segun las veces que le indiquemos)
# Vector que contiene solo ceros.
vector0 <- rep(0,5)
# Vector 1 (vector repite el numero 1, segun las veces que le indiquemos)
# Vector que contien solo unos.
vector1 <- rep(1,5)
# Vectores ortogonales (producto de vectores = 0)
v1 <- c(1,1)
v2 <- c(-1,1)
vectoresortogonales <- sum(v1*v2)
#### MATRICES ####
#Se leeran los numeros columna por columna
A <- matrix(c(1,3,2,2,8,9),ncol=3)
#Ejercicio de prueba, hacer la siguiente matriz:
#       4  0  5
# A1=  -3  8 -15
#      -15 0  6
A1 <- matrix(c(4,-3,-15,0,8,0,5,-15,6),ncol = 3)
#Si queremos leer los numeros de fila por fila debemos añadir el byrow=T
A2 <- matrix(c(1,3,2,2,8,9), ncol = 3, byrow = T)
# Multiplicacion de una matriz por un escalar
matrizporescalar <- 7*A
#Transpues de una matriz
transpuestadematrizA <-t(A)
#Suma de matrices
#Forma1, forma propia de crear la matriz B
#B <- matrix(c(5,8,3,4,2,7), ncol = 2)
#Forma2, forma segun el pdf de crear la matriz
B <- matrix(c(5,8,3,4,2,7), ncol = 3 , byrow = T)
sumadematricez <- A+B
# Multiplicacion de una matriz por vector
matrizvector <- A%*%a
# Multiplicacion de matriz por vector elemento fila por elemento columna
multiplicacionefporec <- A*a
# Multipliccion de matrices
AM <- matrix(c(1, 3, 2, 2, 8, 9), ncol = 2)
BM <- matrix(c(5, 8, 4, 2), ncol = 2)
multiplicaciondematrices <- AM %*% BM
#MATRIZ CERO
matrizcero <- matrix(0, nrow = 2, ncol = 3)
# MATRIZ UNO
matrizuno <- matrix(1, nrow = 2, ncol = 3)
# MATRIZ DIAGONAL con diferentes elementos.
matrizdiagonal <- diag(c(1, 2, 3))
# Matriz con un mismo elemento en su diagonal
md <- diag(1, 3)
# DIAGONAL DE DIAGONAL
diag(diag(c(1, 2, 3)))
# DIAGONAL MATRIZ AM
diag(AM)
#INVERSA DE UNA MATRIZ
B2 <- matrix(c(1, 3, 2, 4), ncol = 2, byrow = T)
# INVERSA DE UNA MATRIZ SE UTILIZA SOLVE
BI <- solve(B2)
B2 %*% BI
AEC <- matrix(c(1, 2, 3, 4), ncol = 2)
ECb <- c(7, 10)
x <- solve(AEC) %*% ECb
x
library(ggplot2)
library(car)
library(help=car)
library(help=carData)
data("Salaries")
str(Salaries)
summary(Salaries)
View(Salaries)
data(CO2)
force(CO2)
force(CO2)
View(CO2)
ggplot(data = CO2, aes(x=conc , y=uptake))
ggplot(data = Salaries, aes(x=yrs.service , y= salary ))
p <-  ggplot(data = Salaries, aes(x=yrs.service , y= salary ))
class(p)
p + geom_point()
View(Salaries)
p <-  ggplot(data = CO2, aes(x=conc , y=uptake))
class(p)
p + geom_point()
p <-  ggplot(data = CO2, aes(x=conc , y=uptake))
class(p)
p + geom_point()
p + geom_point()
p <-  ggplot(data = Salaries, aes(x=yrs.service , y= salary ))
class(p)
p + geom_point()
p + geom_point()
p <-  ggplot(data = CO2, aes(x=conc , y=uptake))
class(p)
p + geom_point()
p <-  ggplot(data = CO2, aes(x=uptake , y=conc))
class(p)
p + geom_point()
p <-  ggplot(data = CO2, aes(x=conc , y=uptake))
class(p)
p + geom_point()
View(CO2)
rm(list = ls())
getwd()
setwd("E:/Escritorio/EVALUACION6/")
data(iris)
help(iris)
str(iris)
class(iris)
names(iris)
summary(iris)
attach(iris)
help("prop.table")
help("table")
frecuenciasabsolutas <- table(iris$Species)
frecuenciasrelativas <- prop.table(frecuenciasabsolutas)
#MEDIA DE Species
media1 <- mean(iris$Sepal.Length , na.rm = TRUE)
media2 <- mean(iris$Sepal.Width , na.rm = TRUE)
# VARIANZA Y DESVIACION, PERCENTILES, MAXIMO Y MINIMO DE SEPAL.LENGHT
var(iris$Sepal.Length , na.rm = TRUE)
sd(iris$Sepal.Length , na.rm = TRUE)
quantile(iris$Sepal.Length,probs = 0.25)
quantile(iris$Sepal.Length,probs = 0.75)
max(iris$Sepal.Length)
min(iris$Sepal.Length)
# VARIANZA Y DESVIACION, PERCENTILES, MAXIMO Y MINIMO DE SEPAL.WIDTH
var(iris$Sepal.Width , na.rm = TRUE)
sd(iris$Sepal.Width , na.rm = TRUE)
quantile(iris$Sepal.Width,probs = 0.25)
quantile(iris$Sepal.Width,probs = 0.75)
max(iris$Sepal.Width)
min(iris$Sepal.Width)
help("hist")
help("boxplot")
#HISTOGRAMA PARA LA VARIABLE SEPAL.LENGTH
png(filename = "HISTOGRAMASEPAL.LENGHT.png")
hist(table(iris$Sepal.Length), col = c("red") , main = "Histograma para la variable Sepal.Lenght" , xlab = "Sepal.Lenght" , ylab = "Frecuencia")
dev.off()
#HISTOGRAMA PARA LA VARIABLE SEPAL.WIDTH
png(filename = "HISTOGRAMASEPAL.WIDTH.png")
hist(table(iris$Sepal.Width), col = c("purple") , main = "Histograma para la variable Sepal.Width" , xlab = "Sepal.Width" , ylab = "Frecuencia")
dev.off()
#DIAGRAMA DE CAJAS Y BIGOTES PARA EDAD DE RANGO =1.5 Sepal.Lenght
png(filename = "DIAGRAMADECAJASYBIGOTESparaSLySWendiferentesRangos.png")
par(mfrow = c(2,2))
ylm = c(min(iris$Sepal.Length,iris$Sepal.Width) ,
max(iris$Sepal.Length,iris$Sepal.Width))
png(filename = "DIAGRAMADECAJASYBIGOTESparaSLySWendiferentesRangos.png")
par(mfrow = c(2,2))
ylm = c(min(iris$Sepal.Length,iris$Sepal.Width) ,
max(iris$Sepal.Length,iris$Sepal.Width))
boxplot(iris$Sepal.Length , xlab= "Sepal.Lenght" , main= "Cajas y bigotes para la variable Sepal.Lenght", range = 1.5 )
#DIAGRAMA DE CAJAS Y BIGOTES PARA EDAD DE RANGO =0.5 Sepal.Lenght
boxplot(iris$Sepal.Length , xlab= "Sepal.Lenght" , main= "Cajas y bigotes para la variable Sepal.Lenght", range = 0.5 )
#DIAGRAMA DE CAJAS Y BIGOTES PARA EDAD DE RANGO =1.5 Sepal.Width
boxplot(iris$Sepal.Width , xlab= "Sepal.Width" , main= "Cajas y bigotes para la variable Sepal.Width", range = 1.5 )
#DIAGRAMA DE CAJAS Y BIGOTES PARA EDAD DE RANGO =0.5 Sepal.Width
boxplot(iris$Sepal.Width , xlab= "Sepal.Width" , main= "Cajas y bigotes para la variable Sepal.width", range = 0.5 )
dev.off()
